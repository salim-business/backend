const { Order, User } = require("../../models");
const moment = require("moment-timezone");
const xtend = require("xtend");
const socket = require("../../utils/socket");
const { v4: uuidv4 } = require("uuid");
exports.makeOrder = function (req, res, next) {
  // console.log(req.body, "order body");
  // // const orderData = { ...req.body, userId: req.user.id };
  // console.log(req.user.id);
  // console.log("here");
  const payment_ref = uuidv4();
  // console.log("here");
  const orderData = xtend(req.body, {
    userId: req.user.id,
    txref: payment_ref,
  });
  // console.log(orderData);

  // 0753397475

  const Flutterwave = require("flutterwave-node-v3");

  if (process.env.NODE_ENV !== "production") {
    const flw = new Flutterwave(
      process.env.FLUTTER_PUB_DEV,
      process.env.FLUTTER_SEC_DEV
      // process.env.FLUTTER_PUB_KEY,
      // process.env.FLUTTER_SEC_KEY
    );

    // let redirect_url;
    // process.env.NODE_ENV !== "production"
    //   ? (redirect_url = `${process.env.DEV_URL}/redirect`)
    //   : (redirect_url = `${process.env.PROD_URL}/redirect`);
    const ug_mobile_money = async () => {
      // console.log(
      //   redirect_url,
      //   "REdirect >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
      // );

      User.findById(req.user.id, async (err, user) => {
        try {
          const payload = {
            tx_ref: req.body.uuid,
            amount: req.body.cost, //0req.body.cost,cost of item req.data.cost
            email: "movers.koodeyo@gmail.com",
            phone_number: user.phone,
            currency: "UGX",
            fullname: user.username,
            // redirect_url: redirect_url,

            // voucher: "128373", //This is the voucher code generated by the customer. It is meant to be passed in the initial charge request. (only for Vodafone cash)
            // network: "MTN",
          };

          const response = await flw.MobileMoney.uganda(payload);
          console.log(response, "flutter wave init payment response");

          // wait(2000);
          if (response.status !== "error") {
            const order = new Order(orderData);

            order.save((err, order) => {
              if (order) {
                console.log(order._doc);
                res.send(response);
              } else console.log(err, "failed to save to db");
            });
          } else {
            res.send(response);
          }
        } catch (error) {
          console.log(error, "error try & catch");
          res.sendStatus(500);
          // res.status(500).send({
          //   message: "flutterwave failed to initiate payment",
          //   status: "failed",
          // });
          // res.send(error);
        }
      })
        .clone()
        .catch((error) => {
          console.log(error.code, "error");
          res.sendStatus(500);
          // .send({
          //   message: "flutterwave failed to initiate payment",
          //   status: "failed",
          // });
        });
    };

    ug_mobile_money();
  } else {
    const flw = new Flutterwave(
      process.env.FLUTTER_PUB_KEY,
      process.env.FLUTTER_SEC_KEY
    );
    // process.env.NODE_ENV !== "production"
    //   ? (redirect_url = `${process.env.DEV_URL}/redirect`)
    //   : (redirect_url = `${process.env.PROD_URL}/redirect`);
    const ug_mobile_money = async () => {
      // console.log(redirect_url, "redirect url");

      User.findById(req.user.id, async (err, user) => {
        // console.log(user, "user");
        try {
          const payload = {
            tx_ref: req.body.uuid,
            amount: req.body.cost, //req.body.cost, //cost of item req.data.cost
            email: "movers.koodeyo@gmail.com",
            phone_number: user.phone,
            currency: "UGX",
            fullname: user.username,
            // redirect_url: redirect_url,

            // voucher: "128373", //This is the voucher code generated by the customer. It is meant to be passed in the initial charge request. (only for Vodafone cash)
            // network: "MTN",
          };

          const response = await flw.MobileMoney.uganda(payload);
          console.log(response, "flutter wave init payment response");
          // wait(2000);

          if (response.status !== "error") {
            const order = new Order(orderData);

            order.save((err, order) => {
              if (order) {
                console.log(order._doc);
                res.send(response);
              } else console.log(err, "failed to save to db");
            });
          } else {
            res.send(response);
          }

          // res.send(response);
        } catch (error) {
          console.log(error.code, "error try & catch");
          res.sendStatus(500);
          // res.status(500).send({
          //   message: "flutterwave failed to initiate payment",
          //   status: "failed",
          // });
          // res.send(error);
        }
      })
        .clone()
        .catch((error) => {
          console.log(error.code, "error");
          res.sendStatus(500);
          // res.status(500).send({
          //   message: "flutterwave failed to initiate payment",
          //   status: "failed",
          // });
        });
    };

    ug_mobile_money();
  }

  //   order.save((err, order) => {
  //     if (order) {
  //       res.send({
  //         order: {
  //           ...order._doc,
  //           createdAt: moment(order.createdAt)
  //             .tz("Africa/Kampala")
  //             .format("MMMM Do, h:mm a"),
  //         },
  //       });
  //     } else console.log(err, "failed to save to db");
  //   });
};

exports.payOnDelivery = (req, res) => {
  console.log(req.body, "pod body");
  const orderData = xtend(req.body, {
    userId: req.user.id,
  });

  const order = new Order(orderData);

  order.save((err, order) => {
    if (order) {
      console.log(order._doc);
      res.send(order._doc);
    } else {
      console.log(err, "failed to save to db");
      res.sendStatus(500);
    }
  });
};

exports.paidOrder = function (req, res) {
  // console.log(req);
  console.log(req.body, "req bosy");
};
